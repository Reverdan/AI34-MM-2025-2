

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Sep 17 21:21:45 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F628A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     000A                     PCLATH          equ	10	;# 
    66     000B                     INTCON          equ	11	;# 
    67     000C                     PIR1            equ	12	;# 
    68     000E                     TMR1            equ	14	;# 
    69     000E                     TMR1L           equ	14	;# 
    70     000F                     TMR1H           equ	15	;# 
    71     0010                     T1CON           equ	16	;# 
    72     0011                     TMR2            equ	17	;# 
    73     0012                     T2CON           equ	18	;# 
    74     0015                     CCPR1           equ	21	;# 
    75     0015                     CCPR1L          equ	21	;# 
    76     0016                     CCPR1H          equ	22	;# 
    77     0017                     CCP1CON         equ	23	;# 
    78     0018                     RCSTA           equ	24	;# 
    79     0019                     TXREG           equ	25	;# 
    80     001A                     RCREG           equ	26	;# 
    81     001F                     CMCON           equ	31	;# 
    82     0081                     OPTION_REG      equ	129	;# 
    83     0085                     TRISA           equ	133	;# 
    84     0086                     TRISB           equ	134	;# 
    85     008C                     PIE1            equ	140	;# 
    86     008E                     PCON            equ	142	;# 
    87     0092                     PR2             equ	146	;# 
    88     0098                     TXSTA           equ	152	;# 
    89     0099                     SPBRG           equ	153	;# 
    90     009A                     EEDATA          equ	154	;# 
    91     009B                     EEADR           equ	155	;# 
    92     009C                     EECON1          equ	156	;# 
    93     009D                     EECON2          equ	157	;# 
    94     009F                     VRCON           equ	159	;# 
    95     0000                     INDF            equ	0	;# 
    96     0001                     TMR0            equ	1	;# 
    97     0002                     PCL             equ	2	;# 
    98     0003                     STATUS          equ	3	;# 
    99     0004                     FSR             equ	4	;# 
   100     0005                     PORTA           equ	5	;# 
   101     0006                     PORTB           equ	6	;# 
   102     000A                     PCLATH          equ	10	;# 
   103     000B                     INTCON          equ	11	;# 
   104     000C                     PIR1            equ	12	;# 
   105     000E                     TMR1            equ	14	;# 
   106     000E                     TMR1L           equ	14	;# 
   107     000F                     TMR1H           equ	15	;# 
   108     0010                     T1CON           equ	16	;# 
   109     0011                     TMR2            equ	17	;# 
   110     0012                     T2CON           equ	18	;# 
   111     0015                     CCPR1           equ	21	;# 
   112     0015                     CCPR1L          equ	21	;# 
   113     0016                     CCPR1H          equ	22	;# 
   114     0017                     CCP1CON         equ	23	;# 
   115     0018                     RCSTA           equ	24	;# 
   116     0019                     TXREG           equ	25	;# 
   117     001A                     RCREG           equ	26	;# 
   118     001F                     CMCON           equ	31	;# 
   119     0081                     OPTION_REG      equ	129	;# 
   120     0085                     TRISA           equ	133	;# 
   121     0086                     TRISB           equ	134	;# 
   122     008C                     PIE1            equ	140	;# 
   123     008E                     PCON            equ	142	;# 
   124     0092                     PR2             equ	146	;# 
   125     0098                     TXSTA           equ	152	;# 
   126     0099                     SPBRG           equ	153	;# 
   127     009A                     EEDATA          equ	154	;# 
   128     009B                     EEADR           equ	155	;# 
   129     009C                     EECON1          equ	156	;# 
   130     009D                     EECON2          equ	157	;# 
   131     009F                     VRCON           equ	159	;# 
   132                           
   133                           	psect	idataBANK0
   134     06A4                     __pidataBANK0:
   135                           
   136                           ;initializer for _display
   137     06A4  34EE               	retlw	238
   138     06A5  3400               	retlw	0
   139     06A6  3428               	retlw	40
   140     06A7  3400               	retlw	0
   141     06A8  34CD               	retlw	205
   142     06A9  3400               	retlw	0
   143     06AA  346D               	retlw	109
   144     06AB  3400               	retlw	0
   145     06AC  342B               	retlw	43
   146     06AD  3400               	retlw	0
   147     06AE  3467               	retlw	103
   148     06AF  3400               	retlw	0
   149     06B0  34E7               	retlw	231
   150     06B1  3400               	retlw	0
   151     06B2  342C               	retlw	44
   152     06B3  3400               	retlw	0
   153     06B4  34EF               	retlw	239
   154     06B5  3400               	retlw	0
   155     06B6  346F               	retlw	111
   156     06B7  3400               	retlw	0
   157     0005                     _PORTAbits      set	5
   158     0006                     _PORTBbits      set	6
   159     0006                     _PORTB          set	6
   160     0086                     _TRISB          set	134
   161     0085                     _TRISA          set	133
   162                           
   163                           	psect	cinit
   164     07D6                     start_initialization:	
   165                           ; #config settings
   166                           
   167     07D6                     __initialization:
   168                           
   169                           ; Initialize objects allocated to BANK0
   170     07D6  26A4               	fcall	__pidataBANK0	;fetch initializer
   171     07D7  00A0               	movwf	__pdataBANK0& (0+127)
   172     07D8  26A5               	fcall	__pidataBANK0+1	;fetch initializer
   173     07D9  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   174     07DA  26A6               	fcall	__pidataBANK0+2	;fetch initializer
   175     07DB  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   176     07DC  26A7               	fcall	__pidataBANK0+3	;fetch initializer
   177     07DD  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   178     07DE  26A8               	fcall	__pidataBANK0+4	;fetch initializer
   179     07DF  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   180     07E0  26A9               	fcall	__pidataBANK0+5	;fetch initializer
   181     07E1  00A5               	movwf	(__pdataBANK0+5)& (0+127)
   182     07E2  26AA               	fcall	__pidataBANK0+6	;fetch initializer
   183     07E3  00A6               	movwf	(__pdataBANK0+6)& (0+127)
   184     07E4  26AB               	fcall	__pidataBANK0+7	;fetch initializer
   185     07E5  00A7               	movwf	(__pdataBANK0+7)& (0+127)
   186     07E6  26AC               	fcall	__pidataBANK0+8	;fetch initializer
   187     07E7  00A8               	movwf	(__pdataBANK0+8)& (0+127)
   188     07E8  26AD               	fcall	__pidataBANK0+9	;fetch initializer
   189     07E9  00A9               	movwf	(__pdataBANK0+9)& (0+127)
   190     07EA  26AE               	fcall	__pidataBANK0+10	;fetch initializer
   191     07EB  00AA               	movwf	(__pdataBANK0+10)& (0+127)
   192     07EC  26AF               	fcall	__pidataBANK0+11	;fetch initializer
   193     07ED  00AB               	movwf	(__pdataBANK0+11)& (0+127)
   194     07EE  26B0               	fcall	__pidataBANK0+12	;fetch initializer
   195     07EF  00AC               	movwf	(__pdataBANK0+12)& (0+127)
   196     07F0  26B1               	fcall	__pidataBANK0+13	;fetch initializer
   197     07F1  00AD               	movwf	(__pdataBANK0+13)& (0+127)
   198     07F2  26B2               	fcall	__pidataBANK0+14	;fetch initializer
   199     07F3  00AE               	movwf	(__pdataBANK0+14)& (0+127)
   200     07F4  26B3               	fcall	__pidataBANK0+15	;fetch initializer
   201     07F5  00AF               	movwf	(__pdataBANK0+15)& (0+127)
   202     07F6  26B4               	fcall	__pidataBANK0+16	;fetch initializer
   203     07F7  00B0               	movwf	(__pdataBANK0+16)& (0+127)
   204     07F8  26B5               	fcall	__pidataBANK0+17	;fetch initializer
   205     07F9  00B1               	movwf	(__pdataBANK0+17)& (0+127)
   206     07FA  26B6               	fcall	__pidataBANK0+18	;fetch initializer
   207     07FB  00B2               	movwf	(__pdataBANK0+18)& (0+127)
   208     07FC  26B7               	fcall	__pidataBANK0+19	;fetch initializer
   209     07FD  00B3               	movwf	(__pdataBANK0+19)& (0+127)
   210     07FE                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213     07FE                     __end_of__initialization:
   214     07FE  0183               	clrf	3
   215     07FF  2F25               	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	dataBANK0
   218     0020                     __pdataBANK0:
   219     0020                     _display:
   220     0020                     	ds	20
   221                           
   222                           	psect	cstackCOMMON
   223     0070                     __pcstackCOMMON:
   224     0070                     ?_main:
   225     0070                     ?___wmul:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0070                     ?___awdiv:	
   229                           ; 2 bytes @ 0x0
   230                           
   231     0070                     ___wmul@multiplier:	
   232                           ; 2 bytes @ 0x0
   233                           
   234     0070                     ___awdiv@divisor:	
   235                           ; 2 bytes @ 0x0
   236                           
   237                           
   238                           ; 2 bytes @ 0x0
   239     0070                     	ds	2
   240     0072                     ___wmul@multiplicand:
   241     0072                     ___awdiv@dividend:	
   242                           ; 2 bytes @ 0x2
   243                           
   244                           
   245                           ; 2 bytes @ 0x2
   246     0072                     	ds	2
   247     0074                     ___awdiv@counter:
   248     0074                     ___wmul@product:	
   249                           ; 1 bytes @ 0x4
   250                           
   251     0074                     ??___wmul:	
   252                           ; 2 bytes @ 0x4
   253                           
   254     0074                     ??___awdiv:	
   255                           ; 1 bytes @ 0x4
   256                           
   257                           
   258                           ; 1 bytes @ 0x4
   259     0074                     	ds	1
   260     0075                     ___awdiv@sign:
   261                           
   262                           ; 1 bytes @ 0x5
   263     0075                     	ds	1
   264     0076                     ___awdiv@quotient:
   265                           
   266                           ; 2 bytes @ 0x6
   267     0076                     	ds	2
   268     0078                     ?_atualizaDisplay:
   269     0078                     atualizaDisplay@numero:	
   270                           ; 1 bytes @ 0x8
   271                           
   272                           
   273                           ; 2 bytes @ 0x8
   274     0078                     	ds	2
   275     007A                     ??_atualizaDisplay:
   276                           
   277                           ; 1 bytes @ 0xA
   278     007A                     	ds	2
   279     007C                     ??_main:
   280                           
   281                           ; 1 bytes @ 0xC
   282     007C                     	ds	2
   283                           
   284                           	psect	cstackBANK0
   285     0034                     __pcstackBANK0:
   286     0034                     atualizaDisplay@unidade:
   287                           
   288                           ; 2 bytes @ 0x0
   289     0034                     	ds	2
   290     0036                     atualizaDisplay@dezena:
   291                           
   292                           ; 2 bytes @ 0x2
   293     0036                     	ds	2
   294     0038                     main@numero:
   295                           
   296                           ; 1 bytes @ 0x4
   297     0038                     	ds	1
   298                           
   299                           	psect	maintext
   300     0725                     __pmaintext:	
   301 ;;
   302 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   303 ;;
   304 ;; *************** function _main *****************
   305 ;; Defined at:
   306 ;;		line 29 in file "Display.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;  numero          1    4[BANK0 ] unsigned char 
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   315 ;; Tracked objects:
   316 ;;		On entry : B00/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   320 ;;      Params:         0       0       0       0
   321 ;;      Locals:         0       1       0       0
   322 ;;      Temps:          2       0       0       0
   323 ;;      Totals:         2       1       0       0
   324 ;;Total ram usage:        3 bytes
   325 ;; Hardware stack levels required when called: 2
   326 ;; This function calls:
   327 ;;		_atualizaDisplay
   328 ;; This function is called by:
   329 ;;		Startup code after reset
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333     0725                     _main:	
   334                           ;psect for function _main
   335                           
   336     0725                     l746:	
   337                           ;incstack = 0
   338                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   339                           
   340                           
   341                           ;Display.c: 31:     TRISA = 0xFF;
   342     0725  30FF               	movlw	255
   343     0726  1683               	bsf	3,5	;RP0=1, select bank1
   344     0727  1303               	bcf	3,6	;RP1=0, select bank1
   345     0728  0085               	movwf	5	;volatile
   346     0729                     l748:
   347                           
   348                           ;Display.c: 32:     TRISB = 0x00;
   349     0729  0186               	clrf	6	;volatile
   350                           
   351                           ;Display.c: 33:     PORTB = 0x00;
   352     072A  1283               	bcf	3,5	;RP0=0, select bank0
   353     072B  1303               	bcf	3,6	;RP1=0, select bank0
   354     072C  0186               	clrf	6	;volatile
   355                           
   356                           ;Display.c: 34:     uint8_t numero = 0;
   357     072D  01B8               	clrf	main@numero
   358     072E                     l750:
   359                           
   360                           ;Display.c: 37:     {;Display.c: 38:         if (!PORTAbits.RA2)
   361     072E  1283               	bcf	3,5	;RP0=0, select bank0
   362     072F  1303               	bcf	3,6	;RP1=0, select bank0
   363     0730  1905               	btfsc	5,2	;volatile
   364     0731  2F33               	goto	u351
   365     0732  2F34               	goto	u350
   366     0733                     u351:
   367     0733  2F4C               	goto	l23
   368     0734                     u350:
   369     0734                     l752:
   370                           
   371                           ;Display.c: 39:         {;Display.c: 40:             numero++;
   372     0734  3001               	movlw	1
   373     0735  07B8               	addwf	main@numero,f
   374     0736                     l754:
   375                           
   376                           ;Display.c: 41:             if (numero > 99)
   377     0736  3064               	movlw	100
   378     0737  0238               	subwf	main@numero,w
   379     0738  1C03               	skipc
   380     0739  2F3B               	goto	u361
   381     073A  2F3C               	goto	u360
   382     073B                     u361:
   383     073B  2F46               	goto	l760
   384     073C                     u360:
   385     073C                     l756:
   386                           
   387                           ;Display.c: 42:                 numero = 0;
   388     073C  01B8               	clrf	main@numero
   389     073D  2F46               	goto	l760
   390     073E                     l758:
   391                           
   392                           ;Display.c: 44:             {;Display.c: 45:                 atualizaDisplay(numero);
   393     073E  0838               	movf	main@numero,w
   394     073F  00FC               	movwf	??_main
   395     0740  01FD               	clrf	??_main+1
   396     0741  087C               	movf	??_main,w
   397     0742  00F8               	movwf	atualizaDisplay@numero
   398     0743  087D               	movf	??_main+1,w
   399     0744  00F9               	movwf	atualizaDisplay@numero+1
   400     0745  26DD               	fcall	_atualizaDisplay
   401     0746                     l760:
   402                           
   403                           ;Display.c: 43:             while(!PORTAbits.RA2)
   404     0746  1283               	bcf	3,5	;RP0=0, select bank0
   405     0747  1303               	bcf	3,6	;RP1=0, select bank0
   406     0748  1D05               	btfss	5,2	;volatile
   407     0749  2F4B               	goto	u371
   408     074A  2F4C               	goto	u370
   409     074B                     u371:
   410     074B  2F3E               	goto	l758
   411     074C                     u370:
   412     074C                     l23:	
   413                           ;Display.c: 47:         }
   414                           
   415                           
   416                           ;Display.c: 49:         if (!PORTAbits.RA1)
   417     074C  1885               	btfsc	5,1	;volatile
   418     074D  2F4F               	goto	u381
   419     074E  2F50               	goto	u380
   420     074F                     u381:
   421     074F  2F69               	goto	l772
   422     0750                     u380:
   423     0750                     l762:
   424                           
   425                           ;Display.c: 50:         {;Display.c: 51:             numero--;
   426     0750  3001               	movlw	1
   427     0751  02B8               	subwf	main@numero,f
   428     0752                     l764:
   429                           
   430                           ;Display.c: 52:             if (numero > 99)
   431     0752  3064               	movlw	100
   432     0753  0238               	subwf	main@numero,w
   433     0754  1C03               	skipc
   434     0755  2F57               	goto	u391
   435     0756  2F58               	goto	u390
   436     0757                     u391:
   437     0757  2F63               	goto	l770
   438     0758                     u390:
   439     0758                     l766:
   440                           
   441                           ;Display.c: 53:             {;Display.c: 54:                 numero = 99;
   442     0758  3063               	movlw	99
   443     0759  00B8               	movwf	main@numero
   444     075A  2F63               	goto	l770
   445     075B                     l768:
   446                           
   447                           ;Display.c: 57:             {;Display.c: 58:                 atualizaDisplay(numero);
   448     075B  0838               	movf	main@numero,w
   449     075C  00FC               	movwf	??_main
   450     075D  01FD               	clrf	??_main+1
   451     075E  087C               	movf	??_main,w
   452     075F  00F8               	movwf	atualizaDisplay@numero
   453     0760  087D               	movf	??_main+1,w
   454     0761  00F9               	movwf	atualizaDisplay@numero+1
   455     0762  26DD               	fcall	_atualizaDisplay
   456     0763                     l770:
   457                           
   458                           ;Display.c: 56:             while(!PORTAbits.RA1)
   459     0763  1283               	bcf	3,5	;RP0=0, select bank0
   460     0764  1303               	bcf	3,6	;RP1=0, select bank0
   461     0765  1C85               	btfss	5,1	;volatile
   462     0766  2F68               	goto	u401
   463     0767  2F69               	goto	u400
   464     0768                     u401:
   465     0768  2F5B               	goto	l768
   466     0769                     u400:
   467     0769                     l772:
   468                           
   469                           ;Display.c: 64:         atualizaDisplay(numero);
   470     0769  0838               	movf	main@numero,w
   471     076A  00FC               	movwf	??_main
   472     076B  01FD               	clrf	??_main+1
   473     076C  087C               	movf	??_main,w
   474     076D  00F8               	movwf	atualizaDisplay@numero
   475     076E  087D               	movf	??_main+1,w
   476     076F  00F9               	movwf	atualizaDisplay@numero+1
   477     0770  26DD               	fcall	_atualizaDisplay
   478                           
   479                           ;Display.c: 65:     }
   480     0771  2F2E               	goto	l750
   481     0772  2800               	ljmp	start
   482     0773                     __end_of_main:
   483                           
   484                           	psect	text1
   485     06DD                     __ptext1:	
   486 ;; *************** function _atualizaDisplay *****************
   487 ;; Defined at:
   488 ;;		line 18 in file "Display.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  numero          2    8[COMMON] int 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  dezena          2    2[BANK0 ] int 
   493 ;;  unidade         2    0[BANK0 ] int 
   494 ;; Return value:  Size  Location     Type
   495 ;;                  1    wreg      void 
   496 ;; Registers used:
   497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   503 ;;      Params:         2       0       0       0
   504 ;;      Locals:         0       4       0       0
   505 ;;      Temps:          2       0       0       0
   506 ;;      Totals:         4       4       0       0
   507 ;;Total ram usage:        8 bytes
   508 ;; Hardware stack levels used: 1
   509 ;; Hardware stack levels required when called: 1
   510 ;; This function calls:
   511 ;;		___awdiv
   512 ;;		___wmul
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518     06DD                     _atualizaDisplay:	
   519                           ;psect for function _atualizaDisplay
   520                           
   521     06DD                     l734:	
   522                           ;incstack = 0
   523                           ; Regs used in _atualizaDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   524                           
   525                           
   526                           ;Display.c: 18: void atualizaDisplay(int numero);Display.c: 19: {;Display.c: 20:     int
      +                           dezena = numero / 10;
   527     06DD  300A               	movlw	10
   528     06DE  00F0               	movwf	___awdiv@divisor
   529     06DF  3000               	movlw	0
   530     06E0  00F1               	movwf	___awdiv@divisor+1
   531     06E1  0879               	movf	atualizaDisplay@numero+1,w
   532     06E2  00F3               	movwf	___awdiv@dividend+1
   533     06E3  0878               	movf	atualizaDisplay@numero,w
   534     06E4  00F2               	movwf	___awdiv@dividend
   535     06E5  2773               	fcall	___awdiv
   536     06E6  0871               	movf	?___awdiv+1,w
   537     06E7  1283               	bcf	3,5	;RP0=0, select bank0
   538     06E8  1303               	bcf	3,6	;RP1=0, select bank0
   539     06E9  00B7               	movwf	atualizaDisplay@dezena+1
   540     06EA  0870               	movf	?___awdiv,w
   541     06EB  00B6               	movwf	atualizaDisplay@dezena
   542                           
   543                           ;Display.c: 21:     int unidade = numero - (dezena * 10);
   544     06EC  0837               	movf	atualizaDisplay@dezena+1,w
   545     06ED  00F1               	movwf	___wmul@multiplier+1
   546     06EE  0836               	movf	atualizaDisplay@dezena,w
   547     06EF  00F0               	movwf	___wmul@multiplier
   548     06F0  30F6               	movlw	246
   549     06F1  00F2               	movwf	___wmul@multiplicand
   550     06F2  30FF               	movlw	255
   551     06F3  00F3               	movwf	___wmul@multiplicand+1
   552     06F4  26B8               	fcall	___wmul
   553     06F5  0878               	movf	atualizaDisplay@numero,w
   554     06F6  0770               	addwf	?___wmul,w
   555     06F7  1283               	bcf	3,5	;RP0=0, select bank0
   556     06F8  1303               	bcf	3,6	;RP1=0, select bank0
   557     06F9  00B4               	movwf	atualizaDisplay@unidade
   558     06FA  0879               	movf	atualizaDisplay@numero+1,w
   559     06FB  1803               	skipnc
   560     06FC  0A79               	incf	atualizaDisplay@numero+1,w
   561     06FD  0771               	addwf	?___wmul+1,w
   562     06FE  00B5               	movwf	atualizaDisplay@unidade+1
   563     06FF                     l736:
   564                           
   565                           ;Display.c: 22:     PORTB = display[dezena];
   566     06FF  0836               	movf	atualizaDisplay@dezena,w
   567     0700  00FA               	movwf	??_atualizaDisplay
   568     0701  077A               	addwf	??_atualizaDisplay,w
   569     0702  3E20               	addlw	(low (_display| 0))& (0+255)
   570     0703  0084               	movwf	4
   571     0704  1383               	bcf	3,7	;select IRP bank0
   572     0705  0800               	movf	0,w
   573     0706  0086               	movwf	6	;volatile
   574     0707                     l738:
   575                           
   576                           ;Display.c: 23:     _delay((unsigned long)((10)*(4000000/4000.0)));
   577     0707  300D               	movlw	13
   578     0708  00FB               	movwf	??_atualizaDisplay+1
   579     0709  30FB               	movlw	251
   580     070A  00FA               	movwf	??_atualizaDisplay
   581     070B                     u417:
   582     070B  0BFA               	decfsz	??_atualizaDisplay,f
   583     070C  2F0B               	goto	u417
   584     070D  0BFB               	decfsz	??_atualizaDisplay+1,f
   585     070E  2F0B               	goto	u417
   586     070F  2F10               	nop2
   587     0710                     l740:
   588                           
   589                           ;Display.c: 24:     PORTB = display[unidade];
   590     0710  1283               	bcf	3,5	;RP0=0, select bank0
   591     0711  1303               	bcf	3,6	;RP1=0, select bank0
   592     0712  0834               	movf	atualizaDisplay@unidade,w
   593     0713  00FA               	movwf	??_atualizaDisplay
   594     0714  077A               	addwf	??_atualizaDisplay,w
   595     0715  3E20               	addlw	(low (_display| 0))& (0+255)
   596     0716  0084               	movwf	4
   597     0717  1383               	bcf	3,7	;select IRP bank0
   598     0718  0800               	movf	0,w
   599     0719  0086               	movwf	6	;volatile
   600     071A                     l742:
   601                           
   602                           ;Display.c: 25:     PORTBbits.RB4 = 1;
   603     071A  1606               	bsf	6,4	;volatile
   604     071B                     l744:
   605                           
   606                           ;Display.c: 26:     _delay((unsigned long)((10)*(4000000/4000.0)));
   607     071B  300D               	movlw	13
   608     071C  00FB               	movwf	??_atualizaDisplay+1
   609     071D  30FB               	movlw	251
   610     071E  00FA               	movwf	??_atualizaDisplay
   611     071F                     u427:
   612     071F  0BFA               	decfsz	??_atualizaDisplay,f
   613     0720  2F1F               	goto	u427
   614     0721  0BFB               	decfsz	??_atualizaDisplay+1,f
   615     0722  2F1F               	goto	u427
   616     0723  2F24               	nop2
   617     0724                     l17:
   618     0724  0008               	return
   619     0725                     __end_of_atualizaDisplay:
   620                           
   621                           	psect	text2
   622     06B8                     __ptext2:	
   623 ;; *************** function ___wmul *****************
   624 ;; Defined at:
   625 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\Umul16.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  multiplier      2    0[COMMON] unsigned int 
   628 ;;  multiplicand    2    2[COMMON] unsigned int 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  product         2    4[COMMON] unsigned int 
   631 ;; Return value:  Size  Location     Type
   632 ;;                  2    0[COMMON] unsigned int 
   633 ;; Registers used:
   634 ;;		wreg, status,2, status,0
   635 ;; Tracked objects:
   636 ;;		On entry : 0/0
   637 ;;		On exit  : 0/0
   638 ;;		Unchanged: 0/0
   639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   640 ;;      Params:         4       0       0       0
   641 ;;      Locals:         2       0       0       0
   642 ;;      Temps:          0       0       0       0
   643 ;;      Totals:         6       0       0       0
   644 ;;Total ram usage:        6 bytes
   645 ;; Hardware stack levels used: 1
   646 ;; This function calls:
   647 ;;		Nothing
   648 ;; This function is called by:
   649 ;;		_atualizaDisplay
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653     06B8                     ___wmul:	
   654                           ;psect for function ___wmul
   655                           
   656     06B8                     l676:	
   657                           ;incstack = 0
   658                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   659                           
   660     06B8  01F4               	clrf	___wmul@product
   661     06B9  01F5               	clrf	___wmul@product+1
   662     06BA                     l678:
   663     06BA  1C70               	btfss	___wmul@multiplier,0
   664     06BB  2EBD               	goto	u211
   665     06BC  2EBE               	goto	u210
   666     06BD                     u211:
   667     06BD  2EC4               	goto	l120
   668     06BE                     u210:
   669     06BE                     l680:
   670     06BE  0872               	movf	___wmul@multiplicand,w
   671     06BF  07F4               	addwf	___wmul@product,f
   672     06C0  1803               	skipnc
   673     06C1  0AF5               	incf	___wmul@product+1,f
   674     06C2  0873               	movf	___wmul@multiplicand+1,w
   675     06C3  07F5               	addwf	___wmul@product+1,f
   676     06C4                     l120:
   677     06C4  3001               	movlw	1
   678     06C5                     u225:
   679     06C5  1003               	clrc
   680     06C6  0DF2               	rlf	___wmul@multiplicand,f
   681     06C7  0DF3               	rlf	___wmul@multiplicand+1,f
   682     06C8  3EFF               	addlw	-1
   683     06C9  1D03               	skipz
   684     06CA  2EC5               	goto	u225
   685     06CB                     l682:
   686     06CB  3001               	movlw	1
   687     06CC                     u235:
   688     06CC  1003               	clrc
   689     06CD  0CF1               	rrf	___wmul@multiplier+1,f
   690     06CE  0CF0               	rrf	___wmul@multiplier,f
   691     06CF  3EFF               	addlw	-1
   692     06D0  1D03               	skipz
   693     06D1  2ECC               	goto	u235
   694     06D2                     l684:
   695     06D2  0870               	movf	___wmul@multiplier,w
   696     06D3  0471               	iorwf	___wmul@multiplier+1,w
   697     06D4  1D03               	btfss	3,2
   698     06D5  2ED7               	goto	u241
   699     06D6  2ED8               	goto	u240
   700     06D7                     u241:
   701     06D7  2EBA               	goto	l678
   702     06D8                     u240:
   703     06D8                     l686:
   704     06D8  0875               	movf	___wmul@product+1,w
   705     06D9  00F1               	movwf	?___wmul+1
   706     06DA  0874               	movf	___wmul@product,w
   707     06DB  00F0               	movwf	?___wmul
   708     06DC                     l122:
   709     06DC  0008               	return
   710     06DD                     __end_of___wmul:
   711                           
   712                           	psect	text3
   713     0773                     __ptext3:	
   714 ;; *************** function ___awdiv *****************
   715 ;; Defined at:
   716 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;  divisor         2    0[COMMON] int 
   719 ;;  dividend        2    2[COMMON] int 
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  quotient        2    6[COMMON] int 
   722 ;;  sign            1    5[COMMON] unsigned char 
   723 ;;  counter         1    4[COMMON] unsigned char 
   724 ;; Return value:  Size  Location     Type
   725 ;;                  2    0[COMMON] int 
   726 ;; Registers used:
   727 ;;		wreg, status,2, status,0
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   733 ;;      Params:         4       0       0       0
   734 ;;      Locals:         4       0       0       0
   735 ;;      Temps:          0       0       0       0
   736 ;;      Totals:         8       0       0       0
   737 ;;Total ram usage:        8 bytes
   738 ;; Hardware stack levels used: 1
   739 ;; This function calls:
   740 ;;		Nothing
   741 ;; This function is called by:
   742 ;;		_atualizaDisplay
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746     0773                     ___awdiv:	
   747                           ;psect for function ___awdiv
   748                           
   749     0773                     l690:	
   750                           ;incstack = 0
   751                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   752                           
   753     0773  01F5               	clrf	___awdiv@sign
   754     0774                     l692:
   755     0774  1FF1               	btfss	___awdiv@divisor+1,7
   756     0775  2F77               	goto	u251
   757     0776  2F78               	goto	u250
   758     0777                     u251:
   759     0777  2F7F               	goto	l698
   760     0778                     u250:
   761     0778                     l694:
   762     0778  09F0               	comf	___awdiv@divisor,f
   763     0779  09F1               	comf	___awdiv@divisor+1,f
   764     077A  0AF0               	incf	___awdiv@divisor,f
   765     077B  1903               	skipnz
   766     077C  0AF1               	incf	___awdiv@divisor+1,f
   767     077D                     l696:
   768     077D  3001               	movlw	1
   769     077E  00F5               	movwf	___awdiv@sign
   770     077F                     l698:
   771     077F  1FF3               	btfss	___awdiv@dividend+1,7
   772     0780  2F82               	goto	u261
   773     0781  2F83               	goto	u260
   774     0782                     u261:
   775     0782  2F8A               	goto	l704
   776     0783                     u260:
   777     0783                     l700:
   778     0783  09F2               	comf	___awdiv@dividend,f
   779     0784  09F3               	comf	___awdiv@dividend+1,f
   780     0785  0AF2               	incf	___awdiv@dividend,f
   781     0786  1903               	skipnz
   782     0787  0AF3               	incf	___awdiv@dividend+1,f
   783     0788                     l702:
   784     0788  3001               	movlw	1
   785     0789  06F5               	xorwf	___awdiv@sign,f
   786     078A                     l704:
   787     078A  01F6               	clrf	___awdiv@quotient
   788     078B  01F7               	clrf	___awdiv@quotient+1
   789     078C                     l706:
   790     078C  0870               	movf	___awdiv@divisor,w
   791     078D  0471               	iorwf	___awdiv@divisor+1,w
   792     078E  1903               	btfsc	3,2
   793     078F  2F91               	goto	u271
   794     0790  2F92               	goto	u270
   795     0791                     u271:
   796     0791  2FC7               	goto	l726
   797     0792                     u270:
   798     0792                     l708:
   799     0792  3001               	movlw	1
   800     0793  00F4               	movwf	___awdiv@counter
   801     0794  2F9E               	goto	l714
   802     0795                     l710:
   803     0795  3001               	movlw	1
   804     0796                     u285:
   805     0796  1003               	clrc
   806     0797  0DF0               	rlf	___awdiv@divisor,f
   807     0798  0DF1               	rlf	___awdiv@divisor+1,f
   808     0799  3EFF               	addlw	-1
   809     079A  1D03               	skipz
   810     079B  2F96               	goto	u285
   811     079C                     l712:
   812     079C  3001               	movlw	1
   813     079D  07F4               	addwf	___awdiv@counter,f
   814     079E                     l714:
   815     079E  1FF1               	btfss	___awdiv@divisor+1,7
   816     079F  2FA1               	goto	u291
   817     07A0  2FA2               	goto	u290
   818     07A1                     u291:
   819     07A1  2F95               	goto	l710
   820     07A2                     u290:
   821     07A2                     l716:
   822     07A2  3001               	movlw	1
   823     07A3                     u305:
   824     07A3  1003               	clrc
   825     07A4  0DF6               	rlf	___awdiv@quotient,f
   826     07A5  0DF7               	rlf	___awdiv@quotient+1,f
   827     07A6  3EFF               	addlw	-1
   828     07A7  1D03               	skipz
   829     07A8  2FA3               	goto	u305
   830     07A9  0871               	movf	___awdiv@divisor+1,w
   831     07AA  0273               	subwf	___awdiv@dividend+1,w
   832     07AB  1D03               	skipz
   833     07AC  2FAF               	goto	u315
   834     07AD  0870               	movf	___awdiv@divisor,w
   835     07AE  0272               	subwf	___awdiv@dividend,w
   836     07AF                     u315:
   837     07AF  1C03               	skipc
   838     07B0  2FB2               	goto	u311
   839     07B1  2FB3               	goto	u310
   840     07B2                     u311:
   841     07B2  2FBA               	goto	l722
   842     07B3                     u310:
   843     07B3                     l718:
   844     07B3  0870               	movf	___awdiv@divisor,w
   845     07B4  02F2               	subwf	___awdiv@dividend,f
   846     07B5  0871               	movf	___awdiv@divisor+1,w
   847     07B6  1C03               	skipc
   848     07B7  03F3               	decf	___awdiv@dividend+1,f
   849     07B8  02F3               	subwf	___awdiv@dividend+1,f
   850     07B9                     l720:
   851     07B9  1476               	bsf	___awdiv@quotient,0
   852     07BA                     l722:
   853     07BA  3001               	movlw	1
   854     07BB                     u325:
   855     07BB  1003               	clrc
   856     07BC  0CF1               	rrf	___awdiv@divisor+1,f
   857     07BD  0CF0               	rrf	___awdiv@divisor,f
   858     07BE  3EFF               	addlw	-1
   859     07BF  1D03               	skipz
   860     07C0  2FBB               	goto	u325
   861     07C1                     l724:
   862     07C1  3001               	movlw	1
   863     07C2  02F4               	subwf	___awdiv@counter,f
   864     07C3  1D03               	btfss	3,2
   865     07C4  2FC6               	goto	u331
   866     07C5  2FC7               	goto	u330
   867     07C6                     u331:
   868     07C6  2FA2               	goto	l716
   869     07C7                     u330:
   870     07C7                     l726:
   871     07C7  0875               	movf	___awdiv@sign,w
   872     07C8  1903               	btfsc	3,2
   873     07C9  2FCB               	goto	u341
   874     07CA  2FCC               	goto	u340
   875     07CB                     u341:
   876     07CB  2FD1               	goto	l730
   877     07CC                     u340:
   878     07CC                     l728:
   879     07CC  09F6               	comf	___awdiv@quotient,f
   880     07CD  09F7               	comf	___awdiv@quotient+1,f
   881     07CE  0AF6               	incf	___awdiv@quotient,f
   882     07CF  1903               	skipnz
   883     07D0  0AF7               	incf	___awdiv@quotient+1,f
   884     07D1                     l730:
   885     07D1  0877               	movf	___awdiv@quotient+1,w
   886     07D2  00F1               	movwf	?___awdiv+1
   887     07D3  0876               	movf	___awdiv@quotient,w
   888     07D4  00F0               	movwf	?___awdiv
   889     07D5                     l273:
   890     07D5  0008               	return
   891     07D6                     __end_of___awdiv:
   892     0000                     ___latbits      equ	0
   893     007E                     btemp           set	126	;btemp
   894     007E                     wtemp0          set	126
   895                           
   896                           	psect	config
   897                           
   898                           ;Config register CONFIG @ 0x2007
   899                           ;	Oscillator Selection bits
   900                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   901                           ;	Watchdog Timer Enable bit
   902                           ;	WDTE = OFF, WDT disabled
   903                           ;	Power-up Timer Enable bit
   904                           ;	PWRTE = OFF, PWRT disabled
   905                           ;	RA5/MCLR/VPP Pin Function Select bit
   906                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
   907                           ;	Brown-out Detect Enable bit
   908                           ;	BOREN = ON, BOD enabled
   909                           ;	Low-Voltage Programming Enable bit
   910                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   911                           ;	Data EE Memory Code Protection bit
   912                           ;	CPD = OFF, Data memory code protection off
   913                           ;	Flash Program Memory Code Protection bit
   914                           ;	CP = OFF, Code protection off
   915     2007                     	org	8199
   916     2007  3F6A               	dw	16234

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      5      25
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_atualizaDisplay
    _atualizaDisplay->___awdiv

Critical Paths under _main in BANK0

    _main->_atualizaDisplay

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     626
                                             12 COMMON     2     2      0
                                              4 BANK0      1     1      0
                    _atualizaDisplay
 ---------------------------------------------------------------------------------
 (1) _atualizaDisplay                                      8     6      2     511
                                              8 COMMON     4     2      2
                                              0 BANK0      4     4      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atualizaDisplay
     ___awdiv
     ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               48      0       0      0.0%
BITBANK2            48      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      5      25     31.2%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      39      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Sep 17 21:21:45 2025

                     l23 074C                       l17 0724             ___awdiv@sign 0075  
    ___wmul@multiplicand 0072                      l120 06C4                      l122 06DC  
                    l273 07D5                      l700 0783                      l710 0795  
                    l702 0788                      l720 07B9                      l712 079C  
                    l704 078A                      l730 07D1                      l722 07BA  
                    l714 079E                      l706 078C                      l724 07C1  
                    l716 07A2                      l708 0792                      l740 0710  
                    l718 07B3                      l726 07C7                      l742 071A  
                    l734 06DD                      l750 072E                      l728 07CC  
                    l680 06BE                      l744 071B                      l736 06FF  
                    l760 0746                      l752 0734                      l690 0773  
                    l682 06CB                      l738 0707                      l770 0763  
                    l762 0750                      l754 0736                      l746 0725  
                    l692 0774                      l684 06D2                      l676 06B8  
                    l764 0752                      l772 0769                      l756 073C  
                    l748 0729                      l694 0778                      l686 06D8  
                    l678 06BA                      l766 0758                      l758 073E  
                    l696 077D                      l768 075B                      l698 077F  
                    u210 06BE                      u211 06BD                      u310 07B3  
                    u311 07B2                      u240 06D8                      u400 0769  
                    u305 07A3                      u241 06D7                      u225 06C5  
                    u401 0768                      u330 07C7                      u250 0778  
                    u331 07C6                      u315 07AF                      u251 0777  
                    u235 06CC                      u340 07CC                      u260 0783  
                    u341 07CB                      u325 07BB                      u261 0782  
                    u270 0792                      u350 0734                      u271 0791  
                    u351 0733                      u360 073C                      u417 070B  
                    u361 073B                      u290 07A2                      u370 074C  
                    u291 07A1                      u427 071F                      u371 074B  
                    u380 0750                      u285 0796                      u381 074F  
                    u390 0758                      u391 0757                      fsr0 0004  
      ??_atualizaDisplay 007A                      indf 0000                     _main 0725  
                   btemp 007E                     start 0000                    ?_main 0070  
        __end_of___awdiv 07D6          ___awdiv@divisor 0070          ___awdiv@counter 0074  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  status 0003                    wtemp0 007E          __initialization 07D6  
           __end_of_main 0773                   ??_main 007C         ___awdiv@dividend 0072  
                 ___wmul 06B8                ??___awdiv 0074         ___awdiv@quotient 0076  
__end_of__initialization 07FE           __pcstackCOMMON 0070          _atualizaDisplay 06DD  
           __pidataBANK0 06A4               __pmaintext 0725                  ?___wmul 0070  
__end_of_atualizaDisplay 0725                  ___awdiv 0773                  __ptext1 06DD  
                __ptext2 06B8                  __ptext3 0773                  _display 0020  
   end_of_initialization 07FE                _PORTAbits 0005                _PORTBbits 0006  
       ?_atualizaDisplay 0078               main@numero 0038           __end_of___wmul 06DD  
    start_initialization 07D6                 ??___wmul 0074              __pdataBANK0 0020  
              ___latbits 0000            __pcstackBANK0 0034                 ?___awdiv 0070  
 atualizaDisplay@unidade 0034           ___wmul@product 0074        ___wmul@multiplier 0070  
  atualizaDisplay@dezena 0036    atualizaDisplay@numero 0078  
